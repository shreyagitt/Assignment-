// Generated by CoffeeScript 1.6.2
(function() {
  var EventEmitter, async, explore, fixOptions, fs, handleGlobalEntry, scDirs,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  fs = require("fs");

  async = require("async");

  EventEmitter = require("events").EventEmitter;

  scDirs = [".git", ".svn", ".hg"];

  module.exports = function(root, options) {
    var emitter;

    if (options == null) {
      options = {};
    }
    emitter = new EventEmitter;
    fixOptions(options);
    setImmediate(function() {
      emitter.emit("start");
      return explore(root, emitter, options, function(err) {
        emitter.emit("end", err);
        if (!err) {
          return emitter.emit("succces", err);
        }
      });
    });
    return emitter;
  };

  fixOptions = function(options) {
    options.runner = options.sort || options.wait ? async.forEachSeries : async.forEach;
    if (!options.waitOn) {
      options.waitOn = {};
    }
    if (!options.ignoreDirectories) {
      options.ignoreDirectories = [];
    }
    if (options.ignoreSourceControl) {
      options.ignoreDirectories = options.ignoreDirectories.concat(scDirs);
    }
    if (options.ignoreNodeModules) {
      options.ignoreDirectories.push("node_modules");
    }
    return options;
  };

  explore = function(root, emitter, options, next) {
    var handleEntry;

    handleEntry = function(name, next) {
      return handleGlobalEntry(root, name, emitter, options, next);
    };
    return fs.readdir(root, function(err, names) {
      if (err) {
        return next(err);
      }
      if (options.sort) {
        names.sort();
      }
      return options.runner(names, handleEntry, function(err) {
        if (err) {
          return next(err);
        }
        return next(null);
      });
    });
  };

  handleGlobalEntry = function(root, name, emitter, options, next) {
    var entryPath;

    entryPath = "" + root + "/" + name;
    emitter.emit("entry", root, name);
    return fs.lstat(entryPath, function(err, stat) {
      var nextStep, type;

      if (err) {
        return next(err);
      }
      if (stat.isDirectory()) {
        if (__indexOf.call(options.ignoreDirectories, name) >= 0) {
          nextStep = next;
        } else {
          type = "directory";
          nextStep = function() {
            emitter.emit("enter", root, name);
            return explore(entryPath, emitter, options, function(err) {
              emitter.emit("leave", root, name);
              if (err) {
                return next(err);
              }
              return next(null);
            });
          };
        }
      } else {
        if (stat.isSymbolicLink()) {
          type = "symlink";
        } else if (stat.isFile()) {
          type = "file";
        }
        nextStep = next;
      }
      if (type && options.waitOn[type]) {
        return emitter.emit(type, root, name, stat, nextStep);
      } else if (type) {
        emitter.emit(type, root, name, stat);
        return nextStep();
      } else {
        return nextStep();
      }
    });
  };

}).call(this);

/*
//@ sourceMappingURL=explore.map
*/
